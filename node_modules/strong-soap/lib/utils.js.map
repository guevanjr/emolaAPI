{"version":3,"sources":["../src/utils.js"],"names":["crypto","require","exports","passwordDigestOriginal","passwordDigest","nonce","created","password","pwHash","createHash","rawNonce","Buffer","from","toString","update","digest","concat","TNS_PREFIX","findPrefix","xmlnsMapping","nsURI","n","extend","base","obj","Object","keys","forEach","key","hasOwnProperty","toXMLDate","d","pad","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","createPromiseCallback","cb","promise","Promise","resolve","reject","err","result","envelope","soapHeader"],"mappings":"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","sourcesContent":["// Copyright IBM Corp. 2016,2019. All Rights Reserved.\n// Node module: strong-soap\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\n\n'use strict';\n\nvar crypto = require('crypto');\nexports.passwordDigestOriginal = function passwordDigest(nonce, created, password) {\n  // digest = base64 ( sha1 ( nonce + created + password ) )\n  var pwHash = crypto.createHash('sha1');\n  var rawNonce = Buffer.from(nonce || '', 'base64').toString('binary');\n  pwHash.update(rawNonce + created + password);\n  return pwHash.digest('base64');\n};\n\nexports.passwordDigest = function (nonce, created, password) {\n  // digest = base64 ( sha1 ( nonce + created + password ) )\n  var pwHash = crypto.createHash('sha1');\n  var rawNonce = Buffer.from(nonce || '', 'base64');\n  pwHash.update(Buffer.concat([\n    rawNonce,\n    Buffer.from(created),\n    Buffer.from(password)\n  ]));\n  return pwHash.digest('base64');\n};\n\nvar TNS_PREFIX = ''; // Prefix for targetNamespace\n\nexports.TNS_PREFIX = TNS_PREFIX;\n\n/**\n * Find a key from an object based on the value\n * @param {Object} Namespace prefix/uri mapping\n * @param {*} nsURI value\n * @returns {String} The matching key\n */\nexports.findPrefix = function(xmlnsMapping, nsURI) {\n  for (var n in xmlnsMapping) {\n    if (n === TNS_PREFIX) continue;\n    if (xmlnsMapping[n] === nsURI) {\n      return n;\n    }\n  }\n};\n\nexports.extend = function extend(base, obj) {\n  if (base !== null && typeof base === \"object\" &&\n    obj !== null && typeof obj === \"object\") {\n    Object.keys(obj).forEach(function(key) {\n      if (!base.hasOwnProperty(key))\n        base[key] = obj[key];\n    });\n  }\n  return base;\n};\n\nexports.toXMLDate = function(d) {\n  function pad(n) {\n    return n < 10 ? '0' + n : n;\n  }\n\n  return d.getUTCFullYear() + '-'\n    + pad(d.getUTCMonth() + 1) + '-'\n    + pad(d.getUTCDate()) + 'T'\n    + pad(d.getUTCHours()) + ':'\n    + pad(d.getUTCMinutes()) + ':'\n    + pad(d.getUTCSeconds()) + 'Z';\n};\n\nexports.createPromiseCallback = function createPromiseCallback() {\n  var cb;\n  var promise = new Promise(function(resolve, reject) {\n    cb = function(err, result, envelope, soapHeader) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve({result, envelope, soapHeader});\n      }\n    }\n  });\n  cb.promise = promise;\n  return cb;\n}\n\n"],"file":"utils.js"}