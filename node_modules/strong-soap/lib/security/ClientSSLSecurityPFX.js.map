{"version":3,"sources":["../../src/security/ClientSSLSecurityPFX.js"],"names":["g","require","fs","https","_","Security","ClientSSLSecurityPFX","constructor","pfx","passphrase","options","Buffer","isBuffer","readFileSync","Error","f","merge","addOptions","agent","Agent","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,cAAD,CAAf;;AACA,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAhB;AAAA,IACIE,KAAK,GAAGF,OAAO,CAAC,OAAD,CADnB;AAAA,IAEIG,CAAC,GAAGH,OAAO,CAAC,QAAD,CAFf;AAAA,IAGII,QAAQ,GAAGJ,OAAO,CAAC,YAAD,CAHtB;;AAKA,MAAMK,oBAAN,SAAmCD,QAAnC,CAA4C;AAE1C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEE,EAAAA,WAAW,CAACC,GAAD,EAAMC,UAAN,EAAkBC,OAAlB,EAA2B;AACpC,UAAMA,OAAN;;AAEA,QAAI,OAAOD,UAAP,KAAsB,QAA1B,EAAoC;AAClCC,MAAAA,OAAO,GAAGD,UAAV;AACD;;AACD,QAAID,GAAJ,EAAS;AACP,UAAIG,MAAM,CAACC,QAAP,CAAgBJ,GAAhB,CAAJ,EAA0B;AACxB,aAAKA,GAAL,GAAWA,GAAX;AACD,OAFD,MAEO,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAClC,aAAKA,GAAL,GAAWN,EAAE,CAACW,YAAH,CAAgBL,GAAhB,CAAX;AACD,OAFM,MAEA;AACL,cAAM,IAAIM,KAAJ,CAAUd,CAAC,CAACe,CAAF,CACd,iEADc,CAAV,CAAN;AAED;AACF;;AAED,QAAIN,UAAJ,EAAgB;AACd,UAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAClC,aAAKA,UAAL,GAAkBA,UAAlB;AACD;AACF;;AACD,SAAKC,OAAL,GAAe,EAAf;;AACAN,IAAAA,CAAC,CAACY,KAAF,CAAQ,KAAKN,OAAb,EAAsBA,OAAtB;AACD;;AAEDO,EAAAA,UAAU,CAACP,OAAD,EAAU;AAClBA,IAAAA,OAAO,CAACF,GAAR,GAAc,KAAKA,GAAnB;;AACA,QAAI,KAAKC,UAAT,EAAqB;AACnBC,MAAAA,OAAO,CAACD,UAAR,GAAqB,KAAKA,UAA1B;AACD;;AACDL,IAAAA,CAAC,CAACY,KAAF,CAAQN,OAAR,EAAiB,KAAKA,OAAtB;;AACAA,IAAAA,OAAO,CAACQ,KAAR,GAAgB,IAAIf,KAAK,CAACgB,KAAV,CAAgBT,OAAhB,CAAhB;AACD;;AA3CyC;;AA8C5CU,MAAM,CAACC,OAAP,GAAiBf,oBAAjB","sourcesContent":["// Copyright IBM Corp. 2016. All Rights Reserved.\n// Node module: strong-soap\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\n\n'use strict';\n\nvar g = require('../globalize');\nvar fs = require('fs')\n  , https = require('https')\n  , _ = require('lodash')\n  , Security = require('./security');\n\nclass ClientSSLSecurityPFX extends Security {\n\n  /**\n   * activates SSL for an already existing client using a PFX cert\n   *\n   * @module ClientSSLSecurityPFX\n   * @param {Buffer|String}   pfx\n   * @param {String}   passphrase\n   * @constructor\n   */\n  constructor(pfx, passphrase, options) {\n    super(options);\n\n    if (typeof passphrase === 'object') {\n      options = passphrase;\n    }\n    if (pfx) {\n      if (Buffer.isBuffer(pfx)) {\n        this.pfx = pfx;\n      } else if (typeof pfx === 'string') {\n        this.pfx = fs.readFileSync(pfx);\n      } else {\n        throw new Error(g.f(\n          'supplied {{pfx}} file should be a {{buffer}} or a file location'));\n      }\n    }\n\n    if (passphrase) {\n      if (typeof passphrase === 'string') {\n        this.passphrase = passphrase;\n      }\n    }\n    this.options = {};\n    _.merge(this.options, options);\n  }\n\n  addOptions(options) {\n    options.pfx = this.pfx;\n    if (this.passphrase) {\n      options.passphrase = this.passphrase;\n    }\n    _.merge(options, this.options);\n    options.agent = new https.Agent(options);\n  }\n}\n\nmodule.exports = ClientSSLSecurityPFX;\n"],"file":"ClientSSLSecurityPFX.js"}