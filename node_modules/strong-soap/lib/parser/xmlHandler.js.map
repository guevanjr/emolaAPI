{"version":3,"sources":["../../src/parser/xmlHandler.js"],"names":["xmlBuilder","require","sax","stream","assert","selectn","debug","descriptor","ElementDescriptor","AttributeDescriptor","TypeDescriptor","QName","helper","NamespaceContext","XMLHandler","constructor","schemas","options","valueKey","xmlKey","attributesKey","xsiTypeKey","jsonToXml","node","nsContext","val","begin","version","encoding","standalone","name","nameSpaceContextCreated","toXmlDateOrTime","qname","form","attribute","mapping","declareNamespace","prefix","nsURI","attrName","isSimple","attrs","isMany","Array","isArray","i","n","length","element","elementName","xmlns","pushContext","getPrefixMapping","newlyDeclared","declared","test","replace","cdata","raw","enforceRestrictions","type","schema","simpleTypes","anonymous","restriction","enforce","isNillable","namespaces","xsi","addAttributes","popContext","p","child","refOriginal","typeDescriptor","inheritance","extension","elements","concat","Date","text","mapObject","undefined","getXsiType","xsiTypeDescriptor","xsiType","parse","xsiTypeInfo","complexTypes","describe","_sortKeys","elementOrder","compare","n1","n2","order","i1","indexOf","i2","keys","Object","names","sort","result","attributes","elementDescriptor","push","a","attributeDescriptor","attributeName","childDescriptor","ignoreUnknownProperties","attrDescriptors","createSOAPEnvelope","doc","create","header","body","createSOAPEnvelopeDescriptor","parameterDescriptor","envelopeDescriptor","addElement","headerDescriptor","bodyDescriptor","add","headers","faults","xsdStr","xsd","faultDescriptor","detailDescriptor","f","parseXml","root","xml","cb","parser","stringMode","opt","Readable","createStream","current","stack","onerror","e","process","nextTick","ontext","isDocument","trim","oncdata","onopentag","onclosetag","nsName","top","pop","onend","write","close","pipe","_processText","object","value","xmlToJson","self","refs","id","obj","elementAttributes","substring","addNamespace","isXsiType","xsiXmlns","getNamespaceURI","attrDescriptor","findAttribute","attrValue","parseValue","elementQName","href","substr","hrefs","parent","key","findElement","handleJsonObject","merge","j","hasOwnProperty","ref","Envelope","Body","Fault","errorMessage","getSoap11FaultErrorMessage","getSoap12FaultErrorMessage","error","Error","faultBody","faultcode","faultstring","faultactor","detail","JSON","stringify","code","subCode","reason","role","uri","jsType","dateText","Boolean","toXmlDate","date","isoStr","toISOString","split","toXmlTime","toXmlDateTime","module","exports"],"mappings":"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","sourcesContent":["// Copyright IBM Corp. 2016,2019. All Rights Reserved.\n// Node module: strong-soap\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\n\n'use strict';\n\nvar xmlBuilder = require('xmlbuilder');\nvar sax = require('sax');\nvar stream = require('stream');\nvar assert = require('assert');\nvar selectn = require('selectn');\nvar debug = require('debug')('strong-soap:xmlhandler');\nvar descriptor = require('./xsd/descriptor');\nvar ElementDescriptor = descriptor.ElementDescriptor;\nvar AttributeDescriptor = descriptor.AttributeDescriptor;\nvar TypeDescriptor = descriptor.TypeDescriptor;\nvar QName = require('./qname');\nvar helper = require('./helper');\nvar NamespaceContext = require('./nscontext');\n\n\nclass XMLHandler {\n  constructor(schemas, options) {\n    this.schemas = schemas || {};\n    this.options = options || {};\n    this.options.valueKey = this.options.valueKey || '$value';\n    this.options.xmlKey = this.options.xmlKey || '$xml';\n    this.options.attributesKey = this.options.attributesKey || '$attributes';\n    this.options.xsiTypeKey = this.options.xsiTypeKey || '$xsiType';\n  }\n\n  jsonToXml(node, nsContext, descriptor, val) {\n    if (node == null) {\n      node = xmlBuilder.begin(\n        {version: '1.0', encoding: 'UTF-8', standalone: true});\n    }\n    if (nsContext == null) {\n      nsContext = new NamespaceContext();\n    }\n\n    var name;\n    let nameSpaceContextCreated = false;\n    if (descriptor instanceof AttributeDescriptor) {\n      val = toXmlDateOrTime(descriptor, val);\n      name = descriptor.qname.name;\n      if (descriptor.form === 'unqualified') {\n        node.attribute(name, val);\n      } else if (descriptor.qname) {\n        let mapping = declareNamespace(nsContext, node, descriptor.qname.prefix,\n          descriptor.qname.nsURI);\n        let prefix = mapping ? mapping.prefix : descriptor.qname.prefix;\n        let attrName = prefix ? prefix + ':' + name : name;\n        node.attribute(attrName, val);\n      }\n      return node;\n    }\n\n    if (descriptor instanceof ElementDescriptor) {\n      name = descriptor.qname.name;\n      let isSimple = descriptor.isSimple;\n      let attrs = null;\n      if (descriptor.isMany) {\n        if (Array.isArray(val)) {\n          for (let i = 0, n = val.length; i < n; i++) {\n            node = this.jsonToXml(node, nsContext, descriptor, val[i]);\n          }\n          return node;\n        }\n      }\n      if(val !== null && typeof val === \"object\"){\n        // check for $attributes field\n        if (typeof val[this.options.attributesKey] !== \"undefined\"){\n          attrs = val[this.options.attributesKey];\n        }\n        // add any $value field as xml element value\n        if (typeof val[this.options.valueKey] !== \"undefined\"){\n          val = val[this.options.valueKey];\n        }\n      }\n      let element;\n      let elementName;\n      let xmlns;\n      if (descriptor.form === 'unqualified') {\n        elementName = name;\n        nsContext.pushContext();\n        nameSpaceContextCreated = true;\n      } else if (descriptor.qname) {\n        nsContext.pushContext();\n        nameSpaceContextCreated = true;\n        // get the mapping for the namespace uri\n        let mapping = nsContext.getPrefixMapping(descriptor.qname.nsURI);\n        let newlyDeclared = false;\n        // if namespace not declared, declare it\n        if (mapping === null || mapping.declared === false) {\n          newlyDeclared = true;\n          mapping = declareNamespace(nsContext, null,\n          descriptor.qname.prefix, descriptor.qname.nsURI);\n        }\n        // add the element to a parent node\n        let prefix = mapping ? mapping.prefix : descriptor.qname.prefix;\n        elementName = prefix ? prefix + ':' + name : name;\n        // if namespace is newly declared add the xmlns attribute\n        if (newlyDeclared) {\n          xmlns = prefix ? 'xmlns:' + prefix : 'xmlns';\n        }\n      }\n\n      // add the element to a parent node\n      if (isSimple && /<!\\[CDATA/.test(val)) {\n        element = node.element(elementName);\n        val = val.replace(\"<![CDATA[\",\"\");\n        val = val.replace(\"]]>\",\"\");\n        element.cdata(val);\n      }else if(isSimple && typeof val !== \"undefined\" && val !== null\n        && typeof val[this.options.xmlKey] !== \"undefined\") {\n        val = val[this.options.xmlKey];\n        element = node.element(elementName);\n        val = toXmlDateOrTime(descriptor, val);\n        element.raw(val);\n      } else {\n        // Enforce the type restrictions if configured for such\n        if (this.options.enforceRestrictions && descriptor.type) {\n          const schema = this.schemas[descriptor.type.nsURI];\n          if (schema) {\n            let type = schema.simpleTypes[descriptor.type.name];\n            // if type not available in global schema\n            // , check if it is embedded in descriptor as an anonymous type\n            if (!type && descriptor.type.anonymous) {\n              type = descriptor.type.anonymous;\n            }\n            if (type) {\n              const restriction = type.restriction;\n              if (restriction) {\n                val = restriction.enforce(val);\n              }\n            }\n          }\n        }\n        val = toXmlDateOrTime(descriptor, val);\n        element = isSimple ? node.element(elementName, val) : node.element(elementName);\n      }\n\n      if (xmlns && descriptor.qname.nsURI) {\n        if (typeof element.attribute === 'function') {\n          element.attribute(xmlns, descriptor.qname.nsURI);\n        }\n      }\n\n      if (val == null) {\n        if (descriptor.isNillable) {\n          // Set xsi:nil = true\n          declareNamespace(nsContext, element, 'xsi', helper.namespaces.xsi);\n          if (typeof element.attribute === 'function') {\n            element.attribute('xsi:nil', true);\n          }\n        }\n      }\n\n      if (isSimple) {\n        if (attrs !== null) {\n          // add each field in $attributes object as xml element attribute\n          if (typeof attrs === \"object\") {\n            //add $attributes. Attribute can be an attribute defined in XSD or an xsi:type\n            this.addAttributes(element, nsContext, descriptor, val, attrs);\n          }\n        }\n        if (nameSpaceContextCreated) {\n          nsContext.popContext();\n        }\n        return node;\n      } else if ( val != null) {\n\n        let attrs = val[this.options.attributesKey];\n        if (typeof attrs === 'object') {\n          for (let p in attrs) {\n            let child = attrs[p];\n            if (p === this.options.xsiTypeKey) {\n              if (descriptor instanceof ElementDescriptor) {\n                if (descriptor.refOriginal) {\n                  if (descriptor.refOriginal.typeDescriptor) {\n                    if (descriptor.refOriginal.typeDescriptor.inheritance){\n                      let extension = descriptor.refOriginal.typeDescriptor.inheritance[child.type];\n                      if (extension) {\n                        descriptor.elements = descriptor.elements.concat(extension.elements);\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      //val is not an object - simple or date types\n      if (val != null && ( typeof val !== 'object' || val instanceof Date)) {\n        // for adding a field value nsContext.popContext() shouldnt be called\n        val = toXmlDateOrTime(descriptor, val);\n        element.text(val);\n        //add $attributes. Attribute can be an attribute defined in XSD or an xsi:type.\n        //e.g of xsi:type <name xmlns=\"..\" xmlns:xsi=\"...\" xmlns:ns=\"...\" xsi:type=\"ns:string\">some name</name>\n        if (attrs != null) {\n          this.addAttributes(element, nsContext, descriptor, val, attrs);\n        }\n        if (nameSpaceContextCreated) {\n          nsContext.popContext();\n        }\n        return node;\n      }\n\n      this.mapObject(element, nsContext, descriptor, val, attrs);\n      if (nameSpaceContextCreated) {\n        nsContext.popContext();\n      }\n      return node;\n    }\n\n    if (descriptor == null  || descriptor === undefined || descriptor instanceof TypeDescriptor) {\n      this.mapObject(node, nsContext, descriptor, val);\n      return node;\n    }\n\n    return node;\n  }\n\n  /**\n   * Check if the attributes have xsi:type and return the xsi type descriptor if exists\n   * @param {*} descriptor The current descriptor\n   * @param {*} attrs An object of attribute values\n   */\n  getXsiType(descriptor, attrs) {\n    var xsiTypeDescriptor;\n    if (attrs != null && typeof attrs === \"object\") {\n      for (let p in attrs) {\n        let child = attrs[p];\n        // if field is $xsiType add xsi:type attribute\n        if (p === this.options.xsiTypeKey) {\n          let xsiType;\n          if (typeof child === \"object\" && typeof child.type !== \"undefined\") {\n            // $xsiType has two fields - type, xmlns\n            xsiType = QName.parse(child.type, child.xmlns);\n          } else {\n            xsiType = QName.parse(child);\n          }\n          var schema = this.schemas[xsiType.nsURI];\n          if (schema) {\n            var xsiTypeInfo =\n              schema.complexTypes[xsiType.name] ||\n              schema.simpleTypes[xsiType.name];\n            // The type might not be described\n            // describe() takes wsdl definitions\n            xsiTypeDescriptor = xsiTypeInfo && xsiTypeInfo.describe({schemas: this.schemas});\n          }\n          break;\n        }\n      }\n    }\n    return xsiTypeDescriptor;\n  }\n\n  _sortKeys(val, elementOrder) {\n    function compare(n1, n2, order) {\n      let i1 = order.indexOf(n1);\n      if (i1 === -1) i1 = order.length;\n      let i2 = order.indexOf(n2);\n      if (i2 === -1) i2 = order.length;\n      return i1 - i2;\n    }\n    const keys = Object.keys(val);\n    var names = [].concat(keys).sort((n1, n2) => {\n      let result = compare(n1, n2, elementOrder);\n      if (result ===0) {\n        result = compare(n1, n2, keys);\n      }\n      return result;\n    });\n    return names;\n  }\n\n  /**\n   * Map a JSON object into an XML type\n   * @param {XMLElement} node The root node\n   * @param {NamespaceContext} nsContext Namespace context\n   * @param {TypeDescriptor|ElementDescriptor} descriptor\n   * @param {Object} val\n   * @returns {*}\n   */\n  mapObject(node, nsContext, descriptor, val, attrs) {\n    if (val == null) return node;\n    if (typeof val !== 'object' || (val instanceof Date)) {\n      val = toXmlDateOrTime(descriptor, val);\n      node.text(val);\n      return node;\n    }\n\n    // First try to see if a subtype should be used\n    var xsiType = this.getXsiType(descriptor, attrs);\n    descriptor = xsiType || descriptor;\n\n    var elements = {}, attributes = {};\n    var elementOrder = [];\n    if (descriptor != null) {\n      for (let i = 0, n = descriptor.elements.length; i < n; i++) {\n        let elementDescriptor = descriptor.elements[i];\n        let elementName = elementDescriptor.qname.name;\n        elements[elementName] = elementDescriptor;\n        elementOrder.push(elementName);\n      }\n    }\n\n    if (descriptor != null) {\n      for (let a in descriptor.attributes) {\n        let attributeDescriptor = descriptor.attributes[a];\n        let attributeName = attributeDescriptor.qname.name;\n        attributes[attributeName] = attributeDescriptor;\n      }\n    }\n\n    // handle later if value is an array\n    if (!Array.isArray(val)) {\n      const names = this._sortKeys(val, elementOrder);\n      for (let p of names) {\n        if (p === this.options.attributesKey)\n          continue;\n\t      let child = val[p];\n\t      let childDescriptor = elements[p] || attributes[p];\n\t      if (childDescriptor == null) {\n\t        if (this.options.ignoreUnknownProperties)\n            continue;\n          else\n            childDescriptor = new ElementDescriptor(\n              QName.parse(p), null, 'unqualified', Array.isArray(child));\n        }\n        if (childDescriptor) {\n          this.jsonToXml(node, nsContext, childDescriptor, child);\n        }\n\t    }\n    }\n\n    this.addAttributes(node, nsContext, descriptor, val, attrs);\n\n    return node;\n  }\n\n  addAttributes(node, nsContext, descriptor, val, attrs) {\n    var attrDescriptors = (descriptor && descriptor.attributes) || [];\n    var attributes = {};\n    for (var i = 0; i < attrDescriptors.length; i++) {\n      var qname = attrDescriptors[i].qname;\n      attributes[qname.name] = attrDescriptors[i];\n    }\n    if (attrs != null && typeof attrs === 'object') {\n      for (let p in attrs) {\n        let child = attrs[p];\n        // if field is $xsiType add xsi:type attribute\n        if (p === this.options.xsiTypeKey) {\n          let xsiType;\n          if(typeof child === 'object' && typeof child.type !== 'undefined') {\n            // $xsiType has two fields - type, xmlns\n            xsiType = QName.parse(child.type, child.xmlns);\n          } else {\n            xsiType = QName.parse(child);\n          }\n          declareNamespace(nsContext, node, 'xsi', helper.namespaces.xsi);\n          let mapping = declareNamespace(nsContext, node, xsiType.prefix,\n            xsiType.nsURI);\n          let prefix = mapping ? mapping.prefix : xsiType.prefix;\n          node.attribute('xsi:type', prefix ? prefix + ':' + xsiType.name :\n            xsiType.name);\n          continue;\n        }\n        let childDescriptor = attributes[p];\n        if (childDescriptor == null) {\n          if (this.options.ignoreUnknownProperties) continue;\n          else {\n            childDescriptor =\n              new AttributeDescriptor(QName.parse(p), null, 'unqualified');\n          }\n        }\n        this.jsonToXml(node, nsContext, childDescriptor, child);\n      }\n    }\n  }\n\n  static createSOAPEnvelope(prefix, nsURI) {\n    prefix = prefix || 'soap';\n    var doc = xmlBuilder.create(prefix + ':Envelope',\n      {version: '1.0', encoding: 'UTF-8', standalone: true});\n    nsURI = nsURI || 'http://schemas.xmlsoap.org/soap/envelope/';\n    doc.attribute('xmlns:' + prefix,\n      nsURI);\n    let header = doc.element(prefix + ':Header');\n    let body = doc.element(prefix + ':Body');\n    return {\n      body: body,\n      header: header,\n      doc: doc\n    };\n  }\n\n  static createSOAPEnvelopeDescriptor(prefix, nsURI, parameterDescriptor) {\n    prefix = prefix || 'soap';\n    nsURI = nsURI || 'http://schemas.xmlsoap.org/soap/envelope/';\n    var descriptor = new TypeDescriptor();\n\n    var envelopeDescriptor = new ElementDescriptor(\n      new QName(nsURI, 'Envelope', prefix), null, 'qualified', false);\n    descriptor.addElement(envelopeDescriptor);\n\n    var headerDescriptor = new ElementDescriptor(\n      new QName(nsURI, 'Header', prefix), null, 'qualified', false);\n\n    var bodyDescriptor = new ElementDescriptor(\n      new QName(nsURI, 'Body', prefix), null, 'qualified', false);\n\n    envelopeDescriptor.addElement(headerDescriptor);\n    envelopeDescriptor.addElement(bodyDescriptor);\n\n    if (parameterDescriptor && parameterDescriptor.body) {\n      bodyDescriptor.add(parameterDescriptor.body);\n    }\n\n    if (parameterDescriptor && parameterDescriptor.headers) {\n      bodyDescriptor.add(parameterDescriptor.headers);\n    }\n\n    if (parameterDescriptor && parameterDescriptor.faults) {\n      var xsdStr = new QName(helper.namespaces.xsd, 'string', 'xsd');\n      var faultDescriptor = new ElementDescriptor(\n        new QName(nsURI, 'Fault', prefix), null, 'qualified', false);\n      faultDescriptor.addElement(\n        new ElementDescriptor(nsURI, 'faultcode', xsdStr, 'qualified', false));\n      faultDescriptor.addElement(\n        new ElementDescriptor(nsURI, 'faultstring', xsdStr, 'qualified', false));\n      faultDescriptor.addElement(\n        new ElementDescriptor(nsURI, 'faultactor', xsdStr, 'qualified', false));\n      var detailDescriptor =\n        new ElementDescriptor(nsURI, 'detail', null, 'qualified', false);\n      faultDescriptor.addElement(detailDescriptor);\n\n      for (var f in parameterDescriptor.faults) {\n        detailDescriptor.add(parameterDescriptor.faults[f]);\n      }\n    }\n\n    return descriptor;\n  }\n\n  /**\n   * Parse XML string or stream into the XMLBuilder tree\n   * @param root The root node\n   * @param xml XML string or stream\n   * @param cb\n   * @returns {*}\n   */\n  static parseXml(root, xml, cb) {\n    let parser;\n    let stringMode = true;\n    debug('XMLHandler parseXML. root: %j xml: %j', root, xml);\n    if (typeof xml === 'string') {\n      stringMode = true;\n      parser = sax.parser(true, {opt: {xmlns: true}});\n    } else if (xml instanceof stream.Readable) {\n      stringMode = false;\n      parser = sax.createStream(true, {opt: {xmlns: true}});\n    }\n    if (!root) {\n      root = xmlBuilder.begin();\n    }\n    let current = root;\n    let stack = [root];\n\n    parser.onerror = function(e) {\n      // an error happened.\n      if (cb) process.nextTick(cb);\n    };\n\n    parser.ontext = function(text) {\n      // got some text.  t is the string of text.\n      if (current.isDocument) return;\n      text = text.trim();\n      if (text) {\n        current.text(text);\n      }\n    };\n\n    parser.oncdata = function(text) {\n      if (current.isDocument) return;\n      text = text.trim();\n      if (text) {\n        current.cdata(text);\n      }\n    };\n\n    parser.onopentag = function(node) {\n      // opened a tag.  node has \"name\" and \"attributes\"\n      let element = current.element(node.name);\n      if (node.attributes) {\n        element.attribute(node.attributes);\n      }\n      stack.push(element);\n      current = element;\n    };\n\n    parser.onclosetag = function(nsName) {\n      var top = stack.pop();\n      assert(top === current);\n      assert(top.name === nsName);\n      current = stack[stack.length - 1];\n    };\n\n    parser.onend = function() {\n      if (cb) process.nextTick(function() {\n        // parser stream is done, and ready to have more stuff written to it.\n        cb && cb(null, root);\n      });\n    };\n\n    if (stringMode) {\n      parser.write(xml).close();\n    } else {\n      xml.pipe(parser);\n    }\n    return root;\n  }\n\n  _processText(top, val) {\n    // The parent element has xsi:nil = true\n    if (top.object === null) return;\n    // Top object has no other elements or attributes\n    if (top.object === undefined) {\n      top.object = val;\n    } else if (top.object.constructor === Object) {\n      // Top object already has attributes or elements\n      let value = top.object[this.options.valueKey];\n      if (value !== undefined) {\n        top.object[this.options.valueKey] = value + val;\n      } else {\n        top.object[this.options.valueKey] = val;\n      }\n    } else {\n      // Top object is other simple types, such as string or date\n      top.object = top.object + val;\n    }\n  }\n\n  xmlToJson(nsContext, xml, descriptor) {\n    var self = this;\n    var p = sax.parser(true);\n    nsContext = nsContext || new NamespaceContext();\n    var root = {};\n    var refs = {}, id; // {id: {hrefs:[], obj:}, ...}\n    var stack = [{name: null, object: root, descriptor: descriptor}];\n    var options = this.options;\n\n    p.onopentag = function(node) {\n      nsContext.pushContext();\n      var top = stack[stack.length - 1];\n      var descriptor = top.descriptor;\n      var nsName = node.name;\n      var attrs = node.attributes;\n      var obj = undefined;\n      var elementAttributes = null;\n\n      // Register namespaces 1st\n      for (let a in attrs) {\n        if (/^xmlns:|^xmlns$/.test(a)) {\n          let prefix = (a === 'xmlns') ? '' : a.substring(6);\n          nsContext.addNamespace(prefix, attrs[a]);\n        }\n      }\n\n      // Handle regular attributes\n      for (let a in attrs) {\n        if (/^xmlns:|^xmlns$/.test(a)) continue;\n        let qname = QName.parse(a);\n        var isXsiType = false;\n        var xsiType = null;\n        var xsiXmlns = null;\n        if (nsContext.getNamespaceURI(qname.prefix) === helper.namespaces.xsi) {\n          // Handle xsi:*\n          if (qname.name == 'nil') {\n            // xsi:nil\n            if (attrs[a] === 'true') {\n              obj = null;\n            }\n            continue;\n          } else if (qname.name === 'type') {\n            // xsi:type\n            isXsiType = true;\n            xsiType = attrs[a];\n            xsiType = QName.parse(xsiType);\n            attrs[a] = xsiType.name;\n            if(xsiType.prefix){\n              xsiXmlns = nsContext.getNamespaceURI(xsiType.prefix);\n            }\n          }\n        }\n        let attrName = qname.name;\n        elementAttributes = elementAttributes || {};\n        let attrDescriptor = descriptor && descriptor.findAttribute(qname.name);\n        let attrValue = parseValue(attrs[a], attrDescriptor);\n        // if element attribute is xsi:type add $xsiType field\n        if (isXsiType) {\n          // $xsiType object has two fields - type and xmlns\n          xsiType = {};\n          xsiType.type = attrs[a];\n          xsiType.xmlns = xsiXmlns;\n          elementAttributes[options.xsiTypeKey] = xsiType;\n        } else {\n          elementAttributes[attrName] = attrs[a];\n        }\n      }\n\n      if (elementAttributes) {\n        obj = {};\n        obj[self.options.attributesKey] = elementAttributes;\n      }\n\n      var elementQName = QName.parse(nsName);\n      elementQName.nsURI = nsContext.getNamespaceURI(elementQName.prefix);\n\n      // SOAP href (#id)\n      if (attrs.href != null) {\n        id = attrs.href.substr(1);\n        if (refs[id] === undefined) {\n          refs[id] = {hrefs: [], object: null};\n        }\n        refs[id].hrefs.push({\n          parent: top.object, key: elementQName.name, object: obj\n        });\n      }\n      id = attrs.id;\n      if (id != null) {\n        if (refs[id] === undefined)\n          refs[id] = {hrefs: [], object: null};\n      }\n\n      stack.push({\n        name: elementQName.name,\n        object: obj,\n        descriptor: descriptor && descriptor.findElement(elementQName.name),\n        id: attrs.id,\n      });\n    };\n\n    p.onclosetag = function(nsName) {\n      var elementName = QName.parse(nsName).name;\n      nsContext.popContext();\n      var current = stack.pop();\n      var top = stack[stack.length - 1];\n      if (top.object === undefined) {\n        top.object = {};\n      }\n      if (top.object !== null) {\n        if (typeof top.object === 'object' && elementName in top.object) {\n          // The element exist already, let's create an array\n          let val = top.object[elementName];\n          if (Array.isArray(val)) {\n            // Add to the existing array\n            val.push(current.object);\n          } else {\n            // Convert the element value to an array\n            top.object[elementName] = [val, current.object];\n          }\n        } else {\n          if (current.descriptor && current.descriptor.isMany) {\n            top.object[elementName] = [current.object];\n          } else {\n            top.object[elementName] = current.object;\n          }\n        }\n      }\n      if (current.id != null) {\n        refs[current.id].object = current.object;\n      }\n    };\n\n    p.oncdata = function(text) {\n      text = text && text.trim();\n      if (!text.length)\n        return;\n\n      if (/<\\?xml[\\s\\S]+\\?>/.test(text)) {\n        text = self.xmlToJson(null, text);\n      }\n      // add contents of CDATA to the xml output as a text\n      p.handleJsonObject(text);\n    };\n\n    p.handleJsonObject = function(text) {\n      var top = stack[stack.length - 1];\n      self._processText(top, text);\n    };\n\n    p.ontext = function(text) {\n      text = text && text.trim();\n      if (!text.length)\n        return;\n\n      var top = stack[stack.length - 1];\n      var descriptor = top.descriptor;\n      var value = parseValue(text, descriptor);\n      self._processText(top, value);\n    };\n\n    p.write(xml).close();\n\n    // merge obj with href\n    var merge = function(href, obj) {\n      for (var j in obj) {\n        if (obj.hasOwnProperty(j)) {\n          href.object[j] = obj[j];\n        }\n      }\n    };\n\n    // MultiRef support: merge objects instead of replacing\n    for (let n in refs) {\n      var ref = refs[n];\n      for (var i = 0; i < ref.hrefs.length; i++) {\n        merge(ref.hrefs[i], ref.object);\n      }\n    }\n\n    if (root.Envelope) {\n      var body = root.Envelope.Body;\n      if (root.Envelope.Body !== undefined && root.Envelope.Body !== null) {\n        if (body.Fault !== undefined && body.Fault !== null) {\n          //check if fault is soap 1.1 fault\n          var errorMessage = getSoap11FaultErrorMessage(body.Fault);\n          //check if fault is soap 1.2 fault\n          if (errorMessage == null) {\n            errorMessage = getSoap12FaultErrorMessage(body.Fault);\n          }\n          //couldn't process error message for neither soap 1.1 nor soap 1.2 fault. Nothing else can be done at this point. Send a generic error message.\n          if (errorMessage == null) {\n            errorMessage = 'Error occurred processing Fault response.';\n          }\n          var error = new Error(errorMessage);\n          error.root = root;\n          throw error;\n        }\n      }\n      return root.Envelope;\n    }\n    return root;\n  }\n\n}\n\nfunction getSoap11FaultErrorMessage(faultBody) {\n  var errorMessage = null;\n  var faultcode = selectn('faultcode.$value', faultBody)||\n    selectn('faultcode', faultBody);\n  if (faultcode) { //soap 1.1 fault\n    errorMessage = ' ';\n    //All of the soap 1.1 fault elements should contain string value except detail element which may be a complex type or plain text (string)\n    if (typeof faultcode == 'string') {\n      errorMessage =  'faultcode: ' + faultcode;\n    }\n    var faultstring = selectn('faultstring.$value', faultBody) ||\n      selectn('faultstring', faultBody);\n    if (faultstring && (typeof faultstring == 'string')) {\n      errorMessage = errorMessage + ' faultstring: ' + faultstring;\n    }\n    var faultactor = selectn('faultactor.$value', faultBody) ||\n      selectn('faultactor', faultBody);\n    if (faultactor && (typeof faultactor == 'string')) {\n      errorMessage = errorMessage + ' faultactor: ' + faultactor;\n    }\n    var detail = selectn('detail.$value', faultBody) ||\n      selectn('detail', faultBody);\n    if (detail != null) {\n      if (typeof detail == 'string') { //plain text\n        errorMessage = errorMessage + ' detail: ' + detail;\n      } else { //XML type defined in wsdl\n        errorMessage = errorMessage + ' detail: ' + JSON.stringify(detail);\n      }\n    }\n  }\n  return errorMessage;\n}\n\nfunction getSoap12FaultErrorMessage(faultBody) {\n  var errorMessage = null;\n  let code = selectn('Code', faultBody)||\n    selectn('Code', faultBody);\n  if (code) {\n    //soap 1.2 fault elements have child elements. Hence use JSON.stringify to formulate the error message.\n    errorMessage = ' ';\n    errorMessage = errorMessage + 'Code: ' + JSON.stringify(code);\n    var value = selectn('Value.$value', faultBody) ||\n      selectn('Value', faultBody);\n    if (value) {\n      errorMessage = errorMessage + ' ' + 'Value: ' + JSON.stringify(value);\n    }\n    var subCode = selectn('Subcode.$value', faultBody) ||\n      selectn('Subcode', faultBody);\n    if (subCode) {\n      errorMessage = errorMessage + ' ' + 'Subcode: ' + JSON.stringify(subCode);\n    }\n    var reason = selectn('reason.$value', faultBody) ||\n      selectn('Reason', faultBody);\n    if (reason) {\n      errorMessage = errorMessage + ' ' + 'Reason: ' + JSON.stringify(reason);\n    }\n    var node = selectn('Node.$value', faultBody) ||\n      selectn('Node', faultBody);\n    if (node) {\n      errorMessage = errorMessage + ' ' + 'Node: ' + JSON.stringify(node);\n    }\n    var role = selectn('Role.$value', faultBody) ||\n      selectn('Role', faultBody);\n    if (role) {\n      errorMessage = errorMessage + ' ' + 'Role: ' + JSON.stringify(role);\n    }\n    var detail = selectn('Detail.$value', faultBody) ||\n      selectn('Detail', faultBody);\n    if (detail != null) {\n      if (typeof detail == 'string') { //plain text\n        errorMessage = errorMessage + ' Detail: ' + detail;\n      } else { //XML type defined in wsdl\n        errorMessage = errorMessage + ' Detail: ' + JSON.stringify(detail);\n      }\n    }\n  }\n  return errorMessage;\n}\n\n\nfunction declareNamespace(nsContext, node, prefix, nsURI) {\n  var mapping = nsContext.declareNamespace(prefix, nsURI);\n  if (!mapping) {\n    return false;\n  } else if (node) {\n    if (typeof node.attribute === 'function') {\n      // Some types of node such as XMLDummy does not allow attribute\n      node.attribute('xmlns:' + mapping.prefix, mapping.uri);\n    }\n    return mapping;\n  }\n  return mapping;\n}\n\nfunction parseValue(text, descriptor) {\n  if (typeof text !== 'string') return text;\n  var value = text;\n  var jsType = descriptor && descriptor.jsType;\n  if (jsType === Date) {\n    var dateText = text;\n    // Checks for xs:date with tz, drops the tz \n    // because xs:date doesn't have a time to offset\n    // and JS Date object doesn't store an arbitrary tz\n    if(dateText.length === 16){\n      dateText = text.substr(0, 10);\n    }\n    value = new Date(dateText);\n  } else if (jsType === Boolean) {\n    if (text === 'true' || text === '1') {\n      value = true;\n    } else {\n      value = false;\n    }\n  } else if (typeof jsType === 'function') {\n    value = jsType(text);\n  }\n  return value;\n}\n\nfunction toXmlDate(date) {\n  date = new Date(date);\n  var isoStr = date.toISOString();\n  return isoStr.split('T')[0] + 'Z';\n}\n\nfunction toXmlTime(date) {\n  date = new Date(date);\n  var isoStr = date.toISOString();\n  return isoStr.split('T')[1];\n}\n\nfunction toXmlDateTime(date) {\n  date = new Date(date);\n  var isoStr = date.toISOString();\n  return isoStr;\n}\n\nfunction toXmlDateOrTime(descriptor, val) {\n  if (!descriptor || !descriptor.type || val === null) return val;\n  if (descriptor.type.name === 'date') {\n    val = toXmlDate(val);\n  } else if (descriptor.type.name === 'time') {\n    val = toXmlTime(val);\n  } else if (descriptor.type.name === 'dateTime') {\n    val = toXmlDateTime(val);\n  }\n  return val;\n}\n\nmodule.exports = XMLHandler;\n\n// Exported function for testing\nmodule.exports.parseValue = parseValue;\nmodule.exports.toXmlDate = toXmlDate;\nmodule.exports.toXmlTime = toXmlTime;\nmodule.exports.toXmlDateTime = toXmlDateTime;\n"],"file":"xmlHandler.js"}