{"version":3,"sources":["../../src/parser/qname.js"],"names":["g","require","assert","qnameExp","QName","constructor","nsURI","name","prefix","arguments","length","equal","qname","exec","Error","f","parts","split","toString","str","parse","result","uri","getNamespaceURI","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,CAAC,GAAGC,OAAO,CAAC,cAAD,CAAf;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIE,QAAQ,GAAG,mDAAf;;AAEA,MAAMC,KAAN,CAAY;AACV;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,KAAD,EAAQC,IAAR,EAAcC,MAAd,EAAsB;AAC/B,QAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC1BR,MAAAA,MAAM,CAACS,KAAP,CAAa,OAAOL,KAApB,EAA2B,QAA3B,EACE,wDADF;AAEA,UAAIM,KAAJ;;AACA,UAAIA,KAAK,GAAGT,QAAQ,CAACU,IAAT,CAAcP,KAAd,CAAZ,EAAkC;AAChC,aAAKA,KAAL,GAAaM,KAAK,CAAC,CAAD,CAAL,IAAY,EAAzB;AACA,aAAKJ,MAAL,GAAcI,KAAK,CAAC,CAAD,CAAL,IAAY,EAA1B;AACA,aAAKL,IAAL,GAAYK,KAAK,CAAC,CAAD,CAAL,IAAY,EAAxB;AACD,OAJD,MAIO;AACL,cAAM,IAAIE,KAAJ,CAAUd,CAAC,CAACe,CAAF,CAAI,mBAAJ,EAAyBT,KAAzB,CAAV,CAAN;AACD;AACF,KAXD,MAWO;AACL,WAAKA,KAAL,GAAaA,KAAK,IAAI,EAAtB;AACA,WAAKC,IAAL,GAAYA,IAAI,IAAI,EAApB;;AACA,UAAI,CAACC,MAAL,EAAa;AACX,YAAIQ,KAAK,GAAG,KAAKT,IAAL,CAAUU,KAAV,CAAgB,GAAhB,CAAZ;AACA,aAAKV,IAAL,GAAYS,KAAK,CAAC,CAAD,CAAjB;AACA,aAAKR,MAAL,GAAcQ,KAAK,CAAC,CAAD,CAAnB;AACD,OAJD,MAIO;AACL,aAAKR,MAAL,GAAcA,MAAM,IAAI,EAAxB;AACD;AACF;AACF;AAED;AACF;AACA;AACA;;;AACEU,EAAAA,QAAQ,GAAG;AACT,QAAIC,GAAG,GAAG,EAAV;;AACA,QAAI,KAAKb,KAAT,EAAgB;AACda,MAAAA,GAAG,GAAG,MAAM,KAAKb,KAAX,GAAmB,GAAzB;AACD;;AACD,QAAI,KAAKE,MAAT,EAAiB;AACfW,MAAAA,GAAG,IAAI,KAAKX,MAAL,GAAc,GAArB;AACD;;AACDW,IAAAA,GAAG,IAAI,KAAKZ,IAAZ;AACA,WAAOY,GAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACc,SAALC,KAAK,CAACR,KAAD,EAAQN,KAAR,EAAe;AACzBM,IAAAA,KAAK,GAAGA,KAAK,IAAI,EAAjB;AACA,QAAIS,MAAM,GAAG,IAAIjB,KAAJ,CAAUQ,KAAV,CAAb;AACA,QAAIU,GAAJ;;AACA,QAAIhB,KAAK,IAAI,IAAb,EAAmB;AACjBgB,MAAAA,GAAG,GAAG,EAAN;AACD,KAFD,MAEO,IAAI,OAAOhB,KAAP,KAAiB,QAArB,EAA+B;AACpCgB,MAAAA,GAAG,GAAGhB,KAAN;AACD,KAFM,MAEA,IAAI,OAAOA,KAAK,CAACiB,eAAb,KAAiC,UAArC,EAAiD;AACtDD,MAAAA,GAAG,GAAGhB,KAAK,CAACiB,eAAN,CAAsBF,MAAM,CAACb,MAA7B,CAAN;AACD,KAFM,MAEA;AACLc,MAAAA,GAAG,GAAG,EAAN;AACD;;AACD,QAAIA,GAAJ,EAAS;AACPD,MAAAA,MAAM,CAACf,KAAP,GAAegB,GAAf;AACD;;AACD,WAAOD,MAAP;AACD;;AA3ES;;AA8EZG,MAAM,CAACC,OAAP,GAAiBrB,KAAjB","sourcesContent":["// Copyright IBM Corp. 2016,2017. All Rights Reserved.\n// Node module: strong-soap\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\n\n'use strict';\n\nvar g = require('../globalize');\nvar assert = require('assert');\nvar qnameExp = /^(?:\\{([^\\{\\}]*)\\})?(?:([^\\{\\}]+):)?([^\\{\\}\\:]+)$/;\n\nclass QName {\n  /**\n   * Create a new QName\n   * - new QName(name)\n   * - new QName(nsURI, name)\n   * - new QName(nsURI, name, prefix)\n   *\n   * @param {string} nsURI Namespace URI\n   * @param {string} name Local name\n   * @param {string} prefix Namespace prefix\n   */\n  constructor(nsURI, name, prefix) {\n    if (arguments.length === 1) {\n      assert.equal(typeof nsURI, 'string',\n        'The qname must be string in form of {nsURI}prefix:name');\n      let qname;\n      if (qname = qnameExp.exec(nsURI)) {\n        this.nsURI = qname[1] || '';\n        this.prefix = qname[2] || '';\n        this.name = qname[3] || '';\n      } else {\n        throw new Error(g.f('Invalid qname: %s', nsURI));\n      }\n    } else {\n      this.nsURI = nsURI || '';\n      this.name = name || '';\n      if (!prefix) {\n        let parts = this.name.split(':');\n        this.name = parts[0];\n        this.prefix = parts[1];\n      } else {\n        this.prefix = prefix || '';\n      }\n    }\n  }\n\n  /**\n   * {nsURI}prefix:name\n   * @returns {string}\n   */\n  toString() {\n    var str = '';\n    if (this.nsURI) {\n      str = '{' + this.nsURI + '}';\n    }\n    if (this.prefix) {\n      str += this.prefix + ':';\n    }\n    str += this.name;\n    return str;\n  }\n\n  /**\n   * Parse a qualified name (prefix:name)\n   * @param {string} qname Qualified name\n   * @param {string|NamespaceContext} nsURI\n   * @returns {QName}\n   */\n  static parse(qname, nsURI) {\n    qname = qname || '';\n    var result = new QName(qname);\n    var uri;\n    if (nsURI == null) {\n      uri = '';\n    } else if (typeof nsURI === 'string') {\n      uri = nsURI;\n    } else if (typeof nsURI.getNamespaceURI === 'function') {\n      uri = nsURI.getNamespaceURI(result.prefix);\n    } else {\n      uri = '';\n    }\n    if (uri) {\n      result.nsURI = uri;\n    }\n    return result;\n  }\n}\n\nmodule.exports = QName;\n\n"],"file":"qname.js"}