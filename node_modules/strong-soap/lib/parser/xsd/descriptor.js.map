{"version":3,"sources":["../../../src/parser/xsd/descriptor.js"],"names":["assert","require","QName","AttributeDescriptor","constructor","qname","type","form","TypeDescriptor","elements","attributes","addElement","element","ElementDescriptor","push","addAttribute","attribute","add","item","isMany","clone","i","n","length","extension","findElement","name","findAttribute","find","isSimple","copy","isNillable","jsType","mixed","refOriginal","module","exports"],"mappings":"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","sourcesContent":["// Copyright IBM Corp. 2016,2017. All Rights Reserved.\n// Node module: strong-soap\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\n\n'use strict';\n\nvar assert = require('assert');\nvar QName = require('../qname');\n\n/**\n * Descriptor for an XML attribute\n */\nclass AttributeDescriptor {\n  constructor(qname, type, form) {\n    assert(qname == null || qname instanceof QName, 'Invalid qname: ' + qname);\n    this.qname = qname;\n    this.type = type;\n    form = form || 'qualified';\n    assert(form === 'qualified' || form === 'unqualified',\n      'Invalid form: ' + form);\n    this.form = form;\n  }\n}\n\n/**\n * Descriptor for an XML type\n */\nclass TypeDescriptor {\n  constructor(qname) {\n    this.elements = [];\n    this.attributes = [];\n  }\n\n  addElement(element) {\n    assert(element instanceof ElementDescriptor);\n    this.elements.push(element);\n    return element;\n  }\n\n  addAttribute(attribute) {\n    assert(attribute instanceof AttributeDescriptor);\n    this.attributes.push(attribute);\n    return attribute;\n  }\n\n  add(item, isMany) {\n    if (item instanceof ElementDescriptor) {\n      this.addElement(item.clone(isMany));\n    } else if (item instanceof AttributeDescriptor) {\n      this.addAttribute(item);\n    } else if (item instanceof TypeDescriptor) {\n      var i, n;\n      for (i = 0, n = item.elements.length; i < n; i++) {\n        this.addElement(item.elements[i]);\n      }\n      for (i = 0, n = item.attributes.length; i < n; i++) {\n        this.addAttribute(item.attributes[i]);\n      }\n      if (item.extension) {\n          this.extension = item.extension;\n      }\n    }\n  }\n\n  findElement(name) {\n    for (var i = 0, n = this.elements.length; i < n; i++) {\n      if (this.elements[i].qname.name === name) {\n        return this.elements[i];\n      }\n    }\n    return null;\n  }\n\n  findAttribute(name) {\n    for (var i = 0, n = this.attributes.length; i < n; i++) {\n      if (this.attributes[i].qname.name === name) {\n        return this.attributes[i];\n      }\n    }\n    return null;\n  }\n\n  find(name) {\n    var element = this.findElement(name);\n    if (element) return element;\n    var attribute = this.findAttribute(name);\n    return attribute;\n  }\n}\n\n/**\n * Descriptor for an XML element\n */\nclass ElementDescriptor extends TypeDescriptor {\n  constructor(qname, type, form, isMany) {\n    super();\n    assert(qname == null || qname instanceof QName, 'Invalid qname: ' + qname);\n    this.qname = qname;\n    this.type = type;\n    form = form || 'qualified';\n    assert(form === 'qualified' || form === 'unqualified',\n      'Invalid form: ' + form);\n    this.form = form;\n    this.isMany = !!isMany;\n    this.isSimple = false;\n  }\n\n  clone(isMany) {\n    // Check if the referencing element or this element has 'maxOccurs>1'\n    isMany = (!!isMany) || this.isMany;\n    var copy = new ElementDescriptor(this.qname, this.type, this.form, isMany);\n    copy.isNillable = this.isNillable;\n    copy.isSimple = this.isSimple;\n    if (this.jsType) copy.jsType = this.jsType;\n    if (this.elements != null) copy.elements = this.elements;\n    if (this.attributes != null) copy.attributes = this.attributes;\n    if (this.mixed != null) copy.mixed = this.mixed;\n    copy.refOriginal = this;\n    return copy;\n  }\n}\n\nmodule.exports = {\n  ElementDescriptor: ElementDescriptor,\n  AttributeDescriptor: AttributeDescriptor,\n  TypeDescriptor: TypeDescriptor\n};\n\n"],"file":"descriptor.js"}