{"version":3,"sources":["../../../src/parser/xsd/attribute.js"],"names":["XSDElement","require","Schema","QName","Attribute","constructor","nsName","attrs","options","getForm","parent","$form","$attributeFormDefault","describe","definitions","descriptor","ref","form","qname","getQName","isMany","type","typeQName","AttributeDescriptor","postProcess","defintions","schemas","$ref","resolveSchemaObject","$type","elementName","allowedChildren","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,UAAD,CAAnB;;AAEA,MAAMG,SAAN,SAAwBJ,UAAxB,CAAmC;AACjCK,EAAAA,WAAW,CAACC,MAAD,EAASC,KAAT,EAAgBC,OAAhB,EAAyB;AAClC,UAAMF,MAAN,EAAcC,KAAd,EAAqBC,OAArB;AACD;;AAEDC,EAAAA,OAAO,GAAG;AACR,QAAIC,MAAM,GAAG,KAAKA,MAAlB;;AACA,QAAIA,MAAM,YAAYR,MAAtB,EAA8B;AAC5B;AACA,aAAO,WAAP;AACD;;AACD,QAAI,KAAKS,KAAT,EAAgB;AACd,aAAO,KAAKA,KAAZ;AACD;;AACD,WAAOD,MAAP,EAAe;AACb,UAAIA,MAAM,YAAYR,MAAtB,EAA8B;AAC5B,eAAOQ,MAAM,CAACE,qBAAP,IAAgC,aAAvC;AACD;;AACDF,MAAAA,MAAM,GAAGA,MAAM,CAACA,MAAhB;AACD;;AACD,WAAO,aAAP;AACD;;AAEDG,EAAAA,QAAQ,CAACC,WAAD,EAAc;AACpB,QAAI,KAAKC,UAAT,EAAqB,OAAO,KAAKA,UAAZ;;AAErB,QAAI,KAAKC,GAAT,EAAc;AACZ;AACA,WAAKD,UAAL,GAAkB,KAAKC,GAAL,CAASH,QAAT,CAAkBC,WAAlB,CAAlB;AACA,WAAKC,UAAL,CAAgBE,IAAhB,GAAuB,WAAvB;AACD,KAJD,MAIO;AACL,UAAIA,IAAI,GAAG,KAAKR,OAAL,EAAX;AACA,UAAIS,KAAK,GAAG,KAAKC,QAAL,EAAZ;AACA,UAAIC,MAAM,GAAG,KAAKA,MAAL,EAAb;AACA,UAAIC,IAAI,GAAG,KAAKA,IAAhB;AACA,UAAIC,SAAJ;;AACA,UAAID,IAAI,YAAYlB,KAApB,EAA2B;AACzBmB,QAAAA,SAAS,GAAGD,IAAZ;AACD,OAFD,MAEO,IAAIA,IAAI,YAAYrB,UAApB,EAAgC;AACrCsB,QAAAA,SAAS,GAAGD,IAAI,CAACF,QAAL,EAAZ;AACD;;AACD,WAAKJ,UAAL,GACE,IAAIf,UAAU,CAACuB,mBAAf,CAAmCL,KAAnC,EAA0CI,SAA1C,EAAqDL,IAArD,EAA2DG,MAA3D,CADF;AAED;;AACD,WAAO,KAAKL,UAAZ;AAED;;AAEDS,EAAAA,WAAW,CAACC,UAAD,EAAa;AACtB,QAAIC,OAAO,GAAGD,UAAU,CAACC,OAAzB;;AACA,QAAI,KAAKC,IAAT,EAAe;AACb,WAAKX,GAAL,GAAW,KAAKY,mBAAL,CAAyBF,OAAzB,EAAkC,WAAlC,EAA+C,KAAKC,IAApD,CAAX;AACD,KAFD,MAEO,IAAI,KAAKE,KAAT,EAAgB;AACrB,WAAKR,IAAL,GAAY,KAAKO,mBAAL,CAAyBF,OAAzB,EAAkC,MAAlC,EAA0C,KAAKG,KAA/C,CAAZ;AACD;AACF;;AAvDgC;;AA0DnCzB,SAAS,CAAC0B,WAAV,GAAwB,WAAxB;AACA1B,SAAS,CAAC2B,eAAV,GAA4B,CAAC,YAAD,EAAe,YAAf,CAA5B;AAEAC,MAAM,CAACC,OAAP,GAAiB7B,SAAjB","sourcesContent":["// Copyright IBM Corp. 2016,2017. All Rights Reserved.\n// Node module: strong-soap\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\n\n'use strict';\n\nvar XSDElement = require('./xsdElement');\nvar Schema = require('./schema');\nvar QName = require('../qname');\n\nclass Attribute extends XSDElement {\n  constructor(nsName, attrs, options) {\n    super(nsName, attrs, options);\n  }\n\n  getForm() {\n    var parent = this.parent;\n    if (parent instanceof Schema) {\n      // Global attribute\n      return 'qualified';\n    }\n    if (this.$form) {\n      return this.$form;\n    }\n    while (parent) {\n      if (parent instanceof Schema) {\n        return parent.$attributeFormDefault || 'unqualified';\n      }\n      parent = parent.parent;\n    }\n    return 'unqualified';\n  }\n\n  describe(definitions) {\n    if (this.descriptor) return this.descriptor;\n\n    if (this.ref) {\n      // Ref to a global attribute\n      this.descriptor = this.ref.describe(definitions);\n      this.descriptor.form = 'qualified';\n    } else {\n      var form = this.getForm();\n      var qname = this.getQName();\n      var isMany = this.isMany();\n      var type = this.type;\n      var typeQName;\n      if (type instanceof QName) {\n        typeQName = type;\n      } else if (type instanceof XSDElement) {\n        typeQName = type.getQName();\n      }\n      this.descriptor =\n        new XSDElement.AttributeDescriptor(qname, typeQName, form, isMany);\n    }\n    return this.descriptor;\n\n  }\n\n  postProcess(defintions) {\n    var schemas = defintions.schemas;\n    if (this.$ref) {\n      this.ref = this.resolveSchemaObject(schemas, 'attribute', this.$ref);\n    } else if (this.$type) {\n      this.type = this.resolveSchemaObject(schemas, 'type', this.$type);\n    }\n  }\n}\n\nAttribute.elementName = 'attribute';\nAttribute.allowedChildren = ['annotation', 'simpleType'];\n\nmodule.exports = Attribute;\n"],"file":"attribute.js"}