{"version":3,"sources":["../../../src/parser/xsd/union.js"],"names":["XSDElement","require","helper","SimpleType","Union","constructor","nsName","attrs","options","postProcess","definitions","memberTypes","self","$memberTypes","split","filter","Boolean","forEach","typeQName","type","resolveSchemaObject","schemas","push","children","c","elementName","allowedChildren","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,WAAD,CAApB;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,cAAD,CAAxB;;AAEA,MAAMG,KAAN,SAAoBJ,UAApB,CAA+B;AAC7BK,EAAAA,WAAW,CAACC,MAAD,EAASC,KAAT,EAAgBC,OAAhB,EAAyB;AAClC,UAAMF,MAAN,EAAcC,KAAd,EAAqBC,OAArB;AACD;;AAEDC,EAAAA,WAAW,CAACC,WAAD,EAAc;AACvB,QAAI,KAAKC,WAAT,EAAsB;AACtB,QAAIC,IAAI,GAAG,IAAX;AACA,SAAKD,WAAL,GAAmB,EAAnB;;AACA,QAAI,KAAKE,YAAT,EAAuB;AACrB,WAAKA,YAAL,CAAkBC,KAAlB,CAAwB,KAAxB,EAA+BC,MAA/B,CAAsCC,OAAtC,EAA+CC,OAA/C,CACE,UAASC,SAAT,EAAoB;AAClB,YAAIC,IAAI,GAAGP,IAAI,CAACQ,mBAAL,CAAyBV,WAAW,CAACW,OAArC,EACT,YADS,EACKH,SADL,CAAX;AAEAN,QAAAA,IAAI,CAACD,WAAL,CAAiBW,IAAjB,CAAsBH,IAAtB;AACD,OALH;AAMD;;AACD,SAAKI,QAAL,CAAcN,OAAd,CAAsB,UAASO,CAAT,EAAY;AAChC,UAAIA,CAAC,YAAYrB,UAAjB,EAA6B;AAC3BS,QAAAA,IAAI,CAACD,WAAL,CAAiBW,IAAjB,CAAsBE,CAAtB;AACD;AACF,KAJD;AAKD;;AAtB4B;;AAyB/BpB,KAAK,CAACqB,WAAN,GAAoB,OAApB;AACArB,KAAK,CAACsB,eAAN,GAAwB,CAAC,YAAD,EAAe,YAAf,CAAxB;AAEAC,MAAM,CAACC,OAAP,GAAiBxB,KAAjB","sourcesContent":["// Copyright IBM Corp. 2016,2017. All Rights Reserved.\n// Node module: strong-soap\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\n\n'use strict';\n\nvar XSDElement = require('./xsdElement');\nvar helper = require('../helper');\nvar SimpleType = require('./simpleType');\n\nclass Union extends XSDElement {\n  constructor(nsName, attrs, options) {\n    super(nsName, attrs, options);\n  }\n\n  postProcess(definitions) {\n    if (this.memberTypes) return;\n    var self = this;\n    this.memberTypes = [];\n    if (this.$memberTypes) {\n      this.$memberTypes.split(/\\s+/).filter(Boolean).forEach(\n        function(typeQName) {\n          var type = self.resolveSchemaObject(definitions.schemas,\n            'simpleType', typeQName);\n          self.memberTypes.push(type);\n        });\n    }\n    this.children.forEach(function(c) {\n      if (c instanceof SimpleType) {\n        self.memberTypes.push(c);\n      }\n    });\n  }\n}\n\nUnion.elementName = 'union';\nUnion.allowedChildren = ['annotation', 'simpleType'];\n\nmodule.exports = Union;\n"],"file":"union.js"}