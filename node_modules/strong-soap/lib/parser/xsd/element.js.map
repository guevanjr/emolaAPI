{"version":3,"sources":["../../../src/parser/xsd/element.js"],"names":["XSDElement","require","QName","helper","Schema","ComplexType","SimpleType","Element","constructor","nsName","attrs","options","addChild","child","name","describe","definitions","descriptor","form","getForm","qname","getQName","isMany","type","typeQName","ElementDescriptor","$nillable","isNillable","ref","refDescriptor","clone","isSimple","typeDescriptor","elements","attributes","mixed","extension","jsType","children","i","childDescriptor","$name","anonymous","postProcess","defintions","schemas","$ref","resolveSchemaObject","$type","substitutionGroup","$substitutionGroup","parent","$form","$elementFormDefault","elementName","allowedChildren","module","exports"],"mappings":"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","sourcesContent":["// Copyright IBM Corp. 2016,2018. All Rights Reserved.\n// Node module: strong-soap\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\n\n'use strict';\n\nvar XSDElement = require('./xsdElement');\nvar QName = require('../qname');\nvar helper = require('../helper');\nvar Schema = require('./schema');\nvar ComplexType = require('./complexType');\nvar SimpleType = require('./simpleType');\n\nclass Element extends XSDElement {\n  constructor(nsName, attrs, options) {\n    super(nsName, attrs, options);\n  }\n\n  addChild(child) {\n    this[child.name] = child;\n  }\n\n  describe(definitions) {\n    if (this.descriptor) return this.descriptor;\n    var form = this.getForm();\n    var qname = this.getQName();\n    var isMany = this.isMany();\n\n    var type = this.type;\n    var typeQName;\n    if (type instanceof QName) {\n      typeQName = type;\n    } else if (type instanceof XSDElement) {\n      typeQName = type.getQName();\n    }\n    var descriptor = this.descriptor =\n      new XSDElement.ElementDescriptor(qname, typeQName, form, isMany);\n\n    if (this.$nillable) {\n      descriptor.isNillable = true;\n    }\n\n    if (this.ref) {\n      // Ref to a global element\n      var refDescriptor = this.ref.describe(definitions);\n      if (refDescriptor) {\n        this.descriptor = descriptor = refDescriptor.clone(isMany);\n        if (this.$nillable) {\n          descriptor.isNillable = true;\n        }\n      }\n    } else if (this.type) {\n      if (this.type instanceof ComplexType) {\n        descriptor.isSimple = false;\n        var typeDescriptor = this.type.describe(definitions);\n        if (typeDescriptor) {\n          descriptor.elements = typeDescriptor.elements;\n          descriptor.attributes = typeDescriptor.attributes;\n          descriptor.mixed = typeDescriptor.mixed;\n          descriptor.extension = typeDescriptor.extension;\n          if(descriptor.extension && descriptor.extension.isSimple === true) {\n            descriptor.isSimple = true;\n          }\n          descriptor.typeDescriptor = typeDescriptor;\n        }\n      } else if (this.type instanceof SimpleType) {\n        descriptor.isSimple = true;\n        descriptor.jsType = this.type.jsType;\n      }\n    } else {\n      // anonymous complexType or simpleType\n      var children = this.children;\n      for (var i = 0, child; child = children[i]; i++) {\n        if (child instanceof ComplexType) {\n          descriptor.isSimple = false;\n          var childDescriptor = child.describe(definitions);\n          if (childDescriptor) {\n            descriptor.elements = childDescriptor.elements;\n            descriptor.attributes = childDescriptor.attributes;\n            descriptor.mixed = childDescriptor.mixed;\n          }\n          break;\n        } else if (child instanceof SimpleType) {\n          // name of the parent element is the anonymous type's name\n          child.$name = this.$name;\n          let typeQName = child.getQName();\n          // regenerate descriptor with new type qname\n          descriptor = this.descriptor =\n            new XSDElement.ElementDescriptor(qname, typeQName, form, isMany);\n          descriptor.isSimple = true;\n          if (child.type && child.type.jsType) {\n            descriptor.jsType = child.type.jsType;\n          } else if (child.jsType) {\n            descriptor.jsType = child.jsType;\n          }\n          descriptor.type = typeQName;\n          // embed anonymous type inside the descriptor\n          descriptor.type.anonymous = child;\n        }\n      }\n    }\n    return descriptor;\n  }\n\n  postProcess(defintions) {\n    var schemas = defintions.schemas;\n    if (this.$ref) {\n      this.ref = this.resolveSchemaObject(schemas, 'element', this.$ref);\n    } else if (this.$type) {\n      this.type = this.resolveSchemaObject(schemas, 'type', this.$type);\n    }\n    if (this.substitutionGroup) {\n      this.substitutionGroup = this.resolveSchemaObject(\n        schemas, 'element', this.$substitutionGroup);\n    }\n  }\n\n  getForm() {\n    var parent = this.parent;\n    if (parent instanceof Schema) {\n      // Global element\n      return 'qualified';\n    }\n    if (this.$form) {\n      return this.$form;\n    }\n    while (parent) {\n      if (parent instanceof Schema) {\n        return parent.$elementFormDefault || 'unqualified';\n      }\n      parent = parent.parent;\n    }\n    return 'unqualified';\n  }\n}\n\nElement.elementName = 'element';\nElement.allowedChildren = ['annotation', 'complexType', 'simpleType',\n  'unique', 'key', 'keyref'];\n\nmodule.exports = Element;\n"],"file":"element.js"}