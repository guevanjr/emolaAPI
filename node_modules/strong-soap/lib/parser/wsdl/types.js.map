{"version":3,"sources":["../../../src/parser/wsdl/types.js"],"names":["WSDLElement","require","assert","Schema","Documentation","Types","constructor","nsName","attrs","options","schemas","addChild","child","targetNamespace","$targetNamespace","hasOwnProperty","merge","elementName","allowedChildren","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,eAAD,CAApB;;AACA,IAAIG,aAAa,GAAGH,OAAO,CAAC,iBAAD,CAA3B;;AAEA,MAAMI,KAAN,SAAoBL,WAApB,CAAgC;AAC9BM,EAAAA,WAAW,CAACC,MAAD,EAASC,KAAT,EAAgBC,OAAhB,EAAyB;AAClC,UAAMF,MAAN,EAAcC,KAAd,EAAqBC,OAArB;AACA,SAAKC,OAAL,GAAe,EAAf;AACD;;AAEDC,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACdV,IAAAA,MAAM,CAACU,KAAK,YAAYT,MAAjB,IAA2BS,KAAK,YAAYR,aAA7C,CAAN;;AAEA,QAAIQ,KAAK,YAAYT,MAArB,EAA6B;AAE3B,UAAIU,eAAe,GAAGD,KAAK,CAACE,gBAA5B;;AAEA,UAAI,CAAC,KAAKJ,OAAL,CAAaK,cAAb,CAA4BF,eAA5B,CAAL,EAAmD;AACjD,aAAKH,OAAL,CAAaG,eAAb,IAAgCD,KAAhC;AACD,OAFD,MAEO;AACL;AACA;AACA,aAAKF,OAAL,CAAaG,eAAb,EAA8BG,KAA9B,CAAoCJ,KAApC,EAA2C,IAA3C;AACD;AACF;AACF;;AArB6B;;AAwBhCP,KAAK,CAACY,WAAN,GAAoB,OAApB;AACAZ,KAAK,CAACa,eAAN,GAAwB,CAAC,QAAD,EAAW,eAAX,CAAxB;AAEAC,MAAM,CAACC,OAAP,GAAiBf,KAAjB","sourcesContent":["// Copyright IBM Corp. 2016,2018. All Rights Reserved.\n// Node module: strong-soap\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\n\n'use strict';\n\nvar WSDLElement = require('./wsdlElement');\nvar assert = require('assert');\nvar Schema = require('../xsd/schema');\nvar Documentation = require('./documentation');\n\nclass Types extends WSDLElement {\n  constructor(nsName, attrs, options) {\n    super(nsName, attrs, options);\n    this.schemas = {};\n  }\n\n  addChild(child) {\n    assert(child instanceof Schema || child instanceof Documentation);\n\n    if (child instanceof Schema) {\n\n      var targetNamespace = child.$targetNamespace;\n\n      if (!this.schemas.hasOwnProperty(targetNamespace)) {\n        this.schemas[targetNamespace] = child;\n      } else {\n        // types might have multiple schemas with the same target namespace,\n        // including no target namespace\n        this.schemas[targetNamespace].merge(child, true);\n      }\n    }\n  };\n}\n\nTypes.elementName = 'types';\nTypes.allowedChildren = ['schema', 'documentation'];\n\nmodule.exports = Types;\n"],"file":"types.js"}