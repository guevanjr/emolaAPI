{"version":3,"sources":["../../../src/parser/wsdl/operation.js"],"names":["g","require","WSDLElement","descriptor","ElementDescriptor","TypeDescriptor","QName","helper","SimpleType","assert","Style","documentLiteralWrapped","documentLiteral","rpcLiteral","rpcEncoded","documentEncoded","Operation","constructor","nsName","attrs","options","faults","soapVersion","addChild","child","name","input","output","push","soapAction","$soapAction","style","$style","soapActionRequired","$soapActionRequired","nsURI","postProcess","definitions","_processed","i","n","length","parent","getMode","err","describeHeaders","param","headers","forEach","header","part","element","addElement","describe","type","warn","$name","describeFaults","f","fault","message","children","mode","body","p","parts","wrapperElement","namespace","targetNamespace","inputParts","outputParts","qName","prefix","qname","elementDescriptor","elements","Error","inputHeaders","outputHeaders","Fault","inputEnvelope","createEnvelopeDescriptor","outputEnvelope","faultEnvelope","parameterDescriptor","isOutput","soapNsURI","envelopeDescriptor","add","headerDescriptor","bodyDescriptor","xsdStr","namespaces","xsd","form","faultDescriptor","detailDescriptor","code","subCode","reason","use","count","console","error","elementName","allowedChildren","module","exports"],"mappings":"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","sourcesContent":["// Copyright IBM Corp. 2016,2018. All Rights Reserved.\n// Node module: strong-soap\n// This file is licensed under the MIT License.\n// License text available at https://opensource.org/licenses/MIT\n\n'use strict';\n\nvar g = require('../../globalize');\nvar WSDLElement = require('./wsdlElement');\nvar descriptor = require('../xsd/descriptor');\nvar ElementDescriptor = descriptor.ElementDescriptor;\nvar TypeDescriptor = descriptor.TypeDescriptor;\nvar QName = require('../qname');\nvar helper = require('../helper');\nvar SimpleType = require('../xsd/simpleType');\n\nvar assert = require('assert');\n\nconst Style = {\n  documentLiteralWrapped: 'documentLiteralWrapped',\n  documentLiteral: 'documentLiteral',\n  rpcLiteral: 'rpcLiteral',\n  rpcEncoded: 'rpcEncoded',\n  documentEncoded: 'documentEncoded'\n};\n\nclass Operation extends WSDLElement {\n  constructor(nsName, attrs, options) {\n    super(nsName, attrs, options);\n    //there can be multiple faults defined in the operation. They all will have same type name 'fault'\n    //what differentiates them from each other is, the element/s which will get added under fault <detail> during runtime.\n    this.faults = [];\n    this.soapVersion;\n  }\n\n  addChild(child) {\n    switch (child.name) {\n      case 'input':\n        this.input = child;\n        break;\n      case 'output':\n        this.output = child;\n        break;\n      case 'fault':\n        this.faults.push(child);\n        break;\n      case 'operation': // soap:operation\n        this.soapAction = child.$soapAction || '';\n        this.style = child.$style || '';\n        this.soapActionRequired = child.$soapActionRequired === 'true' || child.$soapActionRequired === '1' || false;\n        //figure out from the binding operation soap version 1.1 or 1.2\n        if (child.nsURI === 'http://schemas.xmlsoap.org/wsdl/soap/') {\n          this.soapVersion ='1.1';\n        } else if(child.nsURI === 'http://schemas.xmlsoap.org/wsdl/soap12/') {\n          this.soapVersion ='1.2';\n        } else {\n          this.soapVersion = '1.1';\n        }\n        break;\n    }\n  }\n\n  postProcess(definitions) {\n    try {\n      if (this._processed) return; // Already processed\n      if (this.input) this.input.postProcess(definitions);\n      if (this.output) this.output.postProcess(definitions);\n      for (let i = 0, n = this.faults.length; i < n; i++) {\n        this.faults[i].postProcess(definitions);\n      }\n      if (this.parent.name === 'binding') {\n        this.getMode();\n      }\n      this._processed = true;\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  static describeHeaders(param, definitions) {\n    if (param == null) return null;\n    var headers = new descriptor.TypeDescriptor();\n    if (!param.headers) return headers;\n    param.headers.forEach(function(header) {\n      var part = header.part;\n      if (part && part.element) {\n        headers.addElement(part.element.describe(definitions));\n      } else if (part && part.type) {\n        g.warn('{{WS-I}} violation: ' +\n          '{{http://ws-i.org/profiles/basicprofile-1.2-2010-11-09.html#BP2113}}' +\n          ' part %s', part.$name);\n      }\n    });\n    return headers;\n  }\n\n  describeFaults(definitions) {\n    var faults = {};\n    for (var f in this.faults) {\n      let fault = this.faults[f];\n      let part = fault.message && fault.message.children[0]; //find the part through Fault message. There is only one part in fault message\n      if (part && part.element) {\n        faults[f] = part.element.describe(definitions);\n      } else {\n        g.warn('{{WS-I}} violation: ' +\n          '{{http://ws-i.org/profiles/basicprofile-1.2-2010-11-09.html#BP2113}}' +\n          ' part %s', part.$name);\n      }\n    }\n    return faults;\n  }\n\n  describe(definitions) {\n    if (this.descriptor) return this.descriptor;\n    var input, output;\n    switch (this.mode) {\n      case Style.documentLiteralWrapped:\n        if (this.input && this.input.body) {\n          for (let p in this.input.body.parts) {\n            let wrapperElement = this.input.body.parts[p].element;\n            if (wrapperElement) {\n              input = wrapperElement.describe(definitions);\n            }\n            break;\n          }\n        }\n        if (this.output && this.output.body) {\n          for (let p in this.output.body.parts) {\n            let wrapperElement = this.output.body.parts[p].element;\n            if (wrapperElement) {\n              output = wrapperElement.describe(definitions);\n            }\n            break;\n          }\n        }\n        break;\n      case Style.documentLiteral:\n        input = new descriptor.TypeDescriptor();\n        output = new descriptor.TypeDescriptor();\n        if (this.input && this.input.body) {\n          for (let p in this.input.body.parts) {\n            let element = this.input.body.parts[p].element;\n            if (element) {\n              input.addElement(element.describe(definitions));\n            }\n          }\n        }\n        if (this.output && this.output.body) {\n          for (let p in this.output.body.parts) {\n            let element = this.output.body.parts[p].element;\n            if (element) {\n              output.addElement(element.describe(definitions));\n            }\n          }\n        }\n        break;\n      case Style.rpcLiteral:\n      case Style.rpcEncoded:\n        // The operation wrapper element\n        let nsURI = (this.input && this.input.body &&\n          this.input.body.namespace) || this.targetNamespace;\n        input = new descriptor.ElementDescriptor(\n          new QName(nsURI, this.$name), null, 'qualified', false);\n        output = new descriptor.ElementDescriptor(\n          new QName(nsURI, this.$name + 'Response'), null, 'qualified', false);\n        let inputParts = new descriptor.TypeDescriptor();\n        let outputParts = new descriptor.TypeDescriptor();\n        if (this.input && this.input.body) {\n          for (let p in this.input.body.parts) {\n            let part = this.input.body.parts[p];\n            let type;\n            if (part.type) {\n              if (part.type instanceof SimpleType) {\n                var qName = new QName(part.type.targetNamespace, part.type.$name, part.type.prefix);\n                type = qName;\n              } else {\n                type = part.type.qname;\n              }\n              let element = new descriptor.ElementDescriptor(\n                new QName(nsURI, p), type, 'unqualified', false);\n              inputParts.addElement(element);\n            } else if (part.element) {\n              var elementDescriptor = part.element.describe(definitions);\n              inputParts.addElement(elementDescriptor);\n            }\n          }\n        }\n        if (this.output && this.output.body) {\n          for (let p in this.output.body.parts) {\n            let part = this.output.body.parts[p];\n            let type;\n            if (part.type) {\n              if (part.type instanceof SimpleType) {\n                var qName = new QName(part.type.targetNamespace, part.type.$name, part.type.prefix);\n                type = qName;\n              } else {\n                type = part.type.qname;\n              }\n              let element = new descriptor.ElementDescriptor(\n                new QName(nsURI, p), type, 'unqualified', false);\n              outputParts.addElement(element);\n            } else if (part.element) {\n              let elementDescriptor = part.element.describe(definitions);\n              outputParts.addElement(elementDescriptor);\n            }\n          }\n        }\n        input.elements = inputParts.elements;\n        output.elements = outputParts.elements;\n        break;\n      case Style.documentEncoded:\n        throw new Error(g.f('{{WSDL}} style not supported: %s', Style.documentEncoded));\n    }\n\n    let faults = this.describeFaults(definitions);\n    let inputHeaders = Operation.describeHeaders(this.input, definitions);\n    let outputHeaders = Operation.describeHeaders(this.output, definitions);\n\n    this.descriptor = {\n      name: this.$name,\n      style: this.mode,\n      soapAction: this.soapAction,\n      soapVersion: this.soapVersion,\n      input: {\n        body: input,\n        headers: inputHeaders\n      },\n      output: {\n        body: output,\n        headers: outputHeaders\n      },\n      faults: {\n          body: {Fault : {faults}}\n      }\n    };\n    this.descriptor.inputEnvelope =\n      Operation.createEnvelopeDescriptor(this.descriptor.input, false, this.soapVersion);\n    this.descriptor.outputEnvelope =\n      Operation.createEnvelopeDescriptor(this.descriptor.output, true, this.soapVersion);\n    this.descriptor.faultEnvelope =\n      Operation.createEnvelopeDescriptor(this.descriptor.faults, true, this.soapVersion);\n\n    return this.descriptor;\n  }\n\n  static createEnvelopeDescriptor(parameterDescriptor, isOutput, soapVersion, prefix, nsURI) {\n    prefix = prefix || 'soap';\n    var soapNsURI;\n    if (soapVersion === '1.1') {\n      soapNsURI = 'http://schemas.xmlsoap.org/soap/envelope/';\n    } else if (soapVersion === '1.2') {\n      soapNsURI = 'http://www.w3.org/2003/05/soap-envelope';\n    }\n\n    nsURI = nsURI || soapNsURI;\n    var descriptor = new TypeDescriptor();\n\n    var envelopeDescriptor = new ElementDescriptor(\n      new QName(nsURI, 'Envelope', prefix), null, 'qualified', false);\n    descriptor.add(envelopeDescriptor);\n\n    var headerDescriptor = new ElementDescriptor(\n      new QName(nsURI, 'Header', prefix), null, 'qualified', false);\n\n    var bodyDescriptor = new ElementDescriptor(\n      new QName(nsURI, 'Body', prefix), null, 'qualified', false);\n\n    envelopeDescriptor.addElement(headerDescriptor);\n    envelopeDescriptor.addElement(bodyDescriptor);\n\n    //add only if input or output. Fault is list of faults unlike input/output element and fault needs further processing below,\n    //before it can be added to the <body>\n    if (parameterDescriptor && parameterDescriptor.body && !parameterDescriptor.body.Fault) {\n      bodyDescriptor.add(parameterDescriptor.body);\n    }\n\n    if (parameterDescriptor && parameterDescriptor.headers) {\n      bodyDescriptor.add(parameterDescriptor.headers);\n    }\n\n    //process faults. An example of resulting structure of the <Body> element with soap 1.1 <Fault> element descriptor:\n    /*\n     <soap:Body>\n       <soap:Fault>\n          <faultcode>sampleFaultCode</faultcode>\n          <faultstring>sampleFaultString</faultstring>\n          <detail>\n            <ns1:myMethodFault1 xmlns:ns1=\"http://example.com/doc_literal_wrapped_test.wsdl\">\n              <errorMessage1>MyMethod Business Exception message</errorMessage1>\n              <value1>10</value1>\n            </ns1:myMethodFault1>\n          </detail>\n        </soap:Fault>\n     </soap:Body>\n     */\n    if (isOutput && parameterDescriptor && parameterDescriptor.body.Fault) {\n      let xsdStr = new QName(helper.namespaces.xsd, 'string', 'xsd');\n      var form;\n      if (soapVersion === '1.1') {\n        form = 'unqualified';\n      } else if (soapVersion === '1.2') {\n        form = 'qualified';\n      }\n\n      let faultDescriptor = new ElementDescriptor(\n        new QName(nsURI, 'Fault', prefix), null, 'qualified', false);\n      bodyDescriptor.add(faultDescriptor);\n      let detailDescriptor;\n      if (soapVersion === '1.1') {\n        faultDescriptor.add(\n          new ElementDescriptor(new QName(nsURI, 'faultcode', prefix), null, form, false));\n        faultDescriptor.add(\n          new ElementDescriptor(new QName(nsURI, 'faultstring', prefix), null, form, false));\n        faultDescriptor.add(\n          new ElementDescriptor(new QName(nsURI, 'faultactor', prefix), null, form, false));\n        detailDescriptor =\n          new ElementDescriptor(new QName(nsURI, 'detail', prefix), null, form, false);\n        faultDescriptor.add(detailDescriptor);\n      } else if (soapVersion === '1.2') {\n        let code = new ElementDescriptor(new QName(nsURI, 'Code', prefix));\n        code.add(\n          new ElementDescriptor(new QName(nsURI, 'Value', prefix), null, form, false));\n        let subCode = new ElementDescriptor(new QName(nsURI, 'Subcode', prefix), null, form, false);\n        code.add (subCode);\n        subCode.add(\n          new ElementDescriptor(new QName(nsURI, 'Value', prefix), null, form, false));\n        faultDescriptor.add(code, null, form, false);\n        let reason = new ElementDescriptor(new QName(nsURI, 'Reason', prefix));\n        reason.add(\n          new ElementDescriptor(new QName(nsURI, 'Text', prefix), null, form, false));\n        faultDescriptor.add(reason, null, form, false);\n        faultDescriptor.add(\n          new ElementDescriptor(new QName(nsURI, 'Node', prefix), null, form, false));\n        faultDescriptor.add(\n          new ElementDescriptor(new QName(nsURI, 'Role', prefix), null, form, false));\n        detailDescriptor =\n          new ElementDescriptor(new QName(nsURI, 'Detail', prefix), null, form, false);\n        faultDescriptor.add(detailDescriptor);\n      }\n      //multiple faults may be defined in wsdl for this operation. Go though every Fault and add it under <detail> element.\n      for (var f in parameterDescriptor.body.Fault.faults) {\n        detailDescriptor.add(parameterDescriptor.body.Fault.faults[f]);\n      }\n    }\n\n    return descriptor;\n  }\n\n  getMode() {\n    let use = this.input && this.input.body && this.input.body.use || 'literal';\n    if (this.style === 'document' && use === 'literal') {\n      // document literal\n      let element = null;\n      let count = 0;\n      if (this.input && this.input.body) {\n        for (let p in this.input.body.parts) {\n          let part = this.input.body.parts[p];\n          element = part.element;\n          if (!(part.element && !part.type)) {\n            console.error('Document/literal part should use element', part);\n            throw new Error('Document/literal part should use element');\n          }\n          count++;\n        }\n      }\n      // Only one part and the input wrapper element has the same name as\n      // operation\n      if (count === 1 && element.$name === this.$name) {\n        count = 0;\n        if (this.output && this.output.body) {\n          for (let p in this.output.body.parts) {\n            let part = this.output.body.parts[p];\n            element = part.element;\n            assert(part.element && !part.type,\n              'Document/literal part should use element');\n            count++;\n          }\n        }\n        if (count === 1) {\n          this.mode = Style.documentLiteralWrapped;\n        } else {\n          this.mode = Style.documentLiteral;\n        }\n      } else {\n        this.mode = Style.documentLiteral;\n      }\n    } else if (this.style === 'document' && use === 'encoded') {\n      this.mode = Style.documentEncoded;\n    } else if (this.style === 'rpc' && use === 'encoded') {\n      this.mode = Style.rpcEncoded;\n    } else if (this.style === 'rpc' && use === 'literal') {\n      this.mode = Style.rpcLiteral;\n    }\n    return this.mode;\n  }\n\n}\n\nOperation.Style = Style;\nOperation.elementName = 'operation';\nOperation.allowedChildren = ['documentation', 'input', 'output', 'fault',\n  'operation'];\n\nmodule.exports = Operation;\n\n"],"file":"operation.js"}